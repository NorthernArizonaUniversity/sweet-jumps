#!/usr/bin/env node

/*
  Copyright 2013-2014 Northern Arizona University

  This file is part of Sweet Jumps.

  Sweet Jumps is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.

  Sweet Jumps is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.

  You should have received a copy of the GNU General Public License along with Sweet Jumps. If not, see <http://www.gnu.org/licenses/>.
*/

var fs = require('fs')
  , path = require('path')
  , common = require('../lib/sweet-jumps/common')
  , package = require('../package.json')
  , log = console.log
  , commands = {}
  , paths = {
      base: path.resolve(__dirname, '..'),
      bin:  path.resolve(__dirname, '..', 'node_modules/.bin'),
      lib:  path.resolve(__dirname, '..', 'lib'),
      tmpl: path.resolve(__dirname, '..', 'templates'),
      cwd:  process.cwd(),
    }
  , argv = require('yargs')
    .alias('V', 'version')
    .alias('v', 'verbose')
    .argv

paths.getBinary = function (name) { return path.resolve(paths.bin, name) }
paths.getTemplate = function (name) { return path.resolve(paths.tmpl, name) }


/**
 * Main function that processes options and calls commands
 * @param  {[type]} paths [description]
 * @param  {[type]} argv  [description]
 * @return {[type]}       [description]
 */
function main(paths, argv) {
  var args = argv._.slice()
    , command = args.shift()
    , params = args.slice()

  if (argv.version) {
    command = 'version'
  }

  if (typeof commands[command] !== 'function') {
    command = 'help'
  }

  // common.dump(paths)
  // common.dump(command)
  // common.dump(commands[command])

  commands[command](command, params, argv)
}


//////////////// COMMANDS /////////////////////

/**
 * Prints the version and exits
 */
commands.version = function (cmd, params, options) {
  console.log(package.name + ' ' + package.version)
  process.exit()
}

/**
 * Prints usage information or help for the specified command and exits
 */
commands.help = function (cmd, params, options) {
  log('Sweet Jumps Help')

  if (cmd, commands[cmd]) {
    log(commands[cmd].help || '')
    printUsage(commands[cmd].usage || null)
  } else {
    log('TODO')
  }

  process.exit()
}


/**
 * Handles commands to generate new projects or components
 * @param  {[type]} cmd     [description]
 * @param  {[type]} options [description]
 * @return {[type]}         [description]
 */

commands.create = function (cmd, params, options) {
  var template = params.shift()

  if (!template || typeof commands['create_' + template] !== 'function') {
    error('invalid template', 'sj create <template> [options]')
  }

  commands['create_' + template](params, options)
}


commands.create_project = function (params, options) {
  var name = params.shift() || options.name
    , initOpts = []
    , env = { sj_name: name }

  if (!name) {
    error('name is required to create a project.', [
      '   sj create project <name> [options]',
      'or sj create project --name=<name> [options]'
    ])
  }

  if (options.server == 'simple' || options.server == 'hooked' || options.server == 'extended') {
    env.sj_server = options.server
  } else if (options['server-simple']) {
    env.sj_server = 'simple'
  } else if (options['server-hooked']) {
    env.sj_server = 'hooked'
  } else if (options['server-extended']) {
    env.sj_server = 'extended'
  }

  if (options.force) {
    initOpts.push('--force')
  }

  gruntInit('project', initOpts, env)
}


//////////////// HELPERS /////////////////////

/**
 * Shows the given error and quits the program, optionally showing the given usage.
 * @param  {string} error
 * @param  {array|string|null} usage
 */
function error(error, usage) {
  log("Cannot proceed:" + error)
  printUsage(usage)
  process.exit()
}


function printUsage(usage) {
  if (usage) {
    log("\nUsage:")

    if (!Array.isArray(usage)) { usage = [usage] }

    usage.forEach(function (line) {
      log("    " + line)
    })

    log("\n")
  }
}

/**
 * Runs grunt init with the specified template
 * @param  {string} template The template directory to init
 */
function gruntInit(template, options, env, callback) {
  if (typeof options === 'function') {
    callback = options
    options = []
    env = {}
  }

  if (typeof env === 'function') {
    callback = env
    if (typeof options === 'string' || Array.isArray(options)) {
      env = {}
    } else {
      env = options
      options = []
    }
  }

  options = [ paths.getTemplate(template) ].concat(options)

  exec(paths.getBinary('grunt-init'), options, env, function (err, stdout, stderr) {
    log(stdout)
    log(stderr)

    if (callback) callback(err, stdout, stderr)
  })
}

/**
 * Executes a command asynchronously. Wrapper around child_process.exec
 * @param  {array|string} command
 * @param  {array|null}   options
 * @param  {object|null}  env
 * @param  {Function}     callback  function (err, stdout, stderr)
 */
function exec(command, options, env, callback) {
  var e = require('child_process').exec

  if (typeof options === 'function') {
    callback = options
    options = []
    env = {}
  }

  if (typeof env === 'function') {
    callback = env
    env = {}
  }

  if (!Array.isArray(command)) {
    command = [command]
  }

  if (options) {
    command = command.concat(options)
  }

  if (env) {
    for (k in env) {
      if (env.hasOwnProperty(k)) {
        command.unshift(k + '="' + env[k] + '"')
      }
    }
  }

  // common.dump({
  //   command: command.join(' '),
  //   cwd: process.cwd()
  // })

  e(command.join(' '), { cwd: process.cwd() }, callback)
}


// process
main(paths, argv)